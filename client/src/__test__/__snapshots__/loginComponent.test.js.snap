// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components Login component should render self and subcomponents 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Connect(Login)
      login={[MockFunction]}
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Provider {
      "_isMounted": true,
      "_reactInternalFiber": FiberNode {
        "_debugID": 59,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 58,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 60,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 61,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": Object {
              "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
              "lineNumber": 31,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 62,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 63,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                    "lineNumber": 33,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 65,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 35,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 36,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "h3",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Login",
                          "className": "heading-class",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Login",
                          "className": "heading-class",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 69,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 37,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 70,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 38,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 73,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 39,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control input-email",
                                "name": "email",
                                "onChange": [Function],
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control input-email",
                                "name": "email",
                                "onChange": [Function],
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 71,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 47,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 74,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 48,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 72,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 56,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 75,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 57,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "btnSubmit btnLogin",
                                    "onClick": [Function],
                                    "type": "submit",
                                    "value": "Login",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "btnSubmit btnLogin",
                                    "onClick": [Function],
                                    "type": "submit",
                                    "value": "Login",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "stateNode": <h3
                          class="heading-class"
                        >
                          Login
                        </h3>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "h3",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-1",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-1",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 71,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 76,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 72,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "h3",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Signup",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Signup",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 77,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 73,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 78,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 74,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 81,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 75,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 79,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 81,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 82,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 82,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 80,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 88,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 83,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                      "lineNumber": 89,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "btnSubmit",
                                      "type": "submit",
                                      "value": "Signup",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "btnSubmit",
                                      "type": "submit",
                                      "value": "Signup",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "form",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "form",
                            "updateQueue": null,
                          },
                          "stateNode": <h3>
                            Signup
                          </h3>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "h3",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h3>
                              Signup
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-2",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h3>
                              Signup
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-2",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>,
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                      ],
                      "className": "row",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>,
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                      ],
                      "className": "row",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="row"
                    >
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "className": "container login-container",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="row"
                    >
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "className": "container login-container",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "authCheck": [Function],
                  "login": undefined,
                  "loginUser": [Function],
                },
                "memoizedState": Object {
                  "email": "",
                  "password": "",
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "authCheck": [Function],
                  "login": undefined,
                  "loginUser": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Login {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleInputChange": [Function],
                  "onSubmit": [Function],
                  "props": Object {
                    "authCheck": [Function],
                    "login": undefined,
                    "loginUser": [Function],
                  },
                  "refs": Object {},
                  "state": Object {
                    "email": "",
                    "password": "",
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "login": [MockFunction],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "login": [MockFunction],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Connect {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "indirectRenderWrappedComponent": [Function],
              "props": Object {
                "login": [MockFunction],
              },
              "refs": Object {},
              "selectChildElement": [Function],
              "selectDerivedProps": [Function],
              "state": null,
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 0,
          "elementType": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            },
          },
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <Connect(Login)
              login={[MockFunction]}
            />,
            "value": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeState": Object {
                "message": "",
              },
            },
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <Connect(Login)
              login={[MockFunction]}
            />,
            "value": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeState": Object {
                "message": "",
              },
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": null,
          "tag": 10,
          "treeBaseDuration": 0,
          "type": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": Object {},
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            },
          },
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "contextDependencies": null,
        "effectTag": 5,
        "elementType": [Function],
        "expirationTime": 0,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "children": <Connect(Login)
            login={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "memoizedState": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "message": "",
          },
        },
        "mode": 0,
        "nextEffect": FiberNode {
          "_debugID": 58,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "pendingProps": Object {
          "children": <Connect(Login)
            login={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 58,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 56,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 14,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 1,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "props": Object {
        "children": <Connect(Login)
          login={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "refs": Object {},
      "state": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeState": Object {
          "message": "",
        },
      },
      "unsubscribe": [Function],
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <Connect(Login)
        login={[MockFunction]}
      />,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": Connect {
        "_reactInternalFiber": FiberNode {
          "_debugID": 61,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": Object {
            "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
            "lineNumber": 31,
          },
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 62,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 63,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 64,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                  "lineNumber": 33,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                    "lineNumber": 34,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 35,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 68,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 36,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "h3",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Login",
                        "className": "heading-class",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Login",
                        "className": "heading-class",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 69,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 37,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 70,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 38,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 73,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 39,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "input",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "form-control input-email",
                              "name": "email",
                              "onChange": [Function],
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "form-control input-email",
                              "name": "email",
                              "onChange": [Function],
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 71,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 47,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 74,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 48,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control",
                                "name": "password",
                                "onChange": [Function],
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control",
                                "name": "password",
                                "onChange": [Function],
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 72,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 56,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 75,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 57,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "btnSubmit btnLogin",
                                  "onClick": [Function],
                                  "type": "submit",
                                  "value": "Login",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "btnSubmit btnLogin",
                                  "onClick": [Function],
                                  "type": "submit",
                                  "value": "Login",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "form",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>,
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>,
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "form",
                        "updateQueue": null,
                      },
                      "stateNode": <h3
                        class="heading-class"
                      >
                        Login
                      </h3>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "h3",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-1",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-1",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 71,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 76,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 72,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "h3",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Signup",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Signup",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 77,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 73,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 78,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 74,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 81,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 75,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 79,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 81,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 82,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 82,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 80,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 88,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 83,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 89,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "btnSubmit",
                                    "type": "submit",
                                    "value": "Signup",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "btnSubmit",
                                    "type": "submit",
                                    "value": "Signup",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>,
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>,
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "stateNode": <h3>
                          Signup
                        </h3>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "h3",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h3>
                            Signup
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-2",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h3>
                            Signup
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-2",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                    ],
                    "className": "row",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                    ],
                    "className": "row",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <div
                    className="row"
                  >
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "className": "container login-container",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <div
                    className="row"
                  >
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "className": "container login-container",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "authCheck": [Function],
                "login": undefined,
                "loginUser": [Function],
              },
              "memoizedState": Object {
                "email": "",
                "password": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "authCheck": [Function],
                "login": undefined,
                "loginUser": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Login {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "handleInputChange": [Function],
                "onSubmit": [Function],
                "props": Object {
                  "authCheck": [Function],
                  "login": undefined,
                  "loginUser": [Function],
                },
                "refs": Object {},
                "state": Object {
                  "email": "",
                  "password": "",
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": Object {
              "expirationTime": 0,
              "first": Object {
                "context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
                "next": null,
                "observedBits": 1073741823,
              },
            },
            "effectTag": 1,
            "elementType": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": [Circular],
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 9,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": [Circular],
                "Provider": Object {
                  "$$typeof": Symbol(react.provider),
                  "_context": [Circular],
                },
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "login": [MockFunction],
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "login": [MockFunction],
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 59,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
              "mode": 0,
              "nextEffect": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "pendingProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Provider {
                "_isMounted": true,
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
                "unsubscribe": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 59,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 5,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
              "mode": 0,
              "nextEffect": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "pendingProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 58,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": null,
                    "expirationTime": 1073741823,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1073741823,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 32,
                  "elementType": null,
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        }
                      }
                    />,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                        class="container login-container"
                      >
                        <div
                          class="row"
                        >
                          <div
                            class="col-md-6 login-form-1"
                          >
                            <h3
                              class="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>
                          <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>
                        </div>
                      </div>
                    </div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 14,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "pingCache": null,
                    "timeoutHandle": -1,
                  },
                  "tag": 3,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Provider {
                "_isMounted": true,
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "refs": Object {},
                "state": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
                "unsubscribe": [Function],
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 10,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "indirectRenderWrappedComponent": [Function],
        "props": Object {
          "login": [MockFunction],
        },
        "refs": Object {},
        "selectChildElement": [Function],
        "selectDerivedProps": [Function],
        "state": null,
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "login": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": Login {
          "_reactInternalFiber": FiberNode {
            "_debugID": 63,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 62,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                  "lineNumber": 31,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "login": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "login": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "login": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                  "lineNumber": 31,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "login": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "login": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "login": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 64,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                "lineNumber": 33,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 65,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                  "lineNumber": 34,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 66,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                    "lineNumber": 35,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 68,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 36,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "h3",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "Login",
                      "className": "heading-class",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "Login",
                      "className": "heading-class",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 69,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 37,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 70,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 38,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 73,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 39,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "input",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "form-control input-email",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Your Email *",
                            "type": "text",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "form-control input-email",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Your Email *",
                            "type": "text",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />,
                          "className": "form-group",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />,
                          "className": "form-group",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 71,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 47,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 74,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 48,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "input",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "form-control",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Your Password *",
                              "type": "password",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "form-control",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Your Password *",
                              "type": "password",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />,
                            "className": "form-group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 72,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 56,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 75,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 57,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "btnSubmit btnLogin",
                                "onClick": [Function],
                                "type": "submit",
                                "value": "Login",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "btnSubmit btnLogin",
                                "onClick": [Function],
                                "type": "submit",
                                "value": "Login",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 2,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "form",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>,
                        ],
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>,
                        ],
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "form",
                      "updateQueue": null,
                    },
                    "stateNode": <h3
                      class="heading-class"
                    >
                      Login
                    </h3>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "h3",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>,
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>,
                    ],
                    "className": "col-md-6 login-form-1",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>,
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>,
                    ],
                    "className": "col-md-6 login-form-1",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 67,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 71,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 76,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 72,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "h3",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Signup",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Signup",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 77,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 73,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 78,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 74,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 81,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 75,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "input",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "form-control",
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "form-control",
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 79,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 81,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 82,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 82,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 80,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 88,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 83,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 89,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "btnSubmit",
                                  "type": "submit",
                                  "value": "Signup",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "btnSubmit",
                                  "type": "submit",
                                  "value": "Signup",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "form",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>,
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>,
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "form",
                        "updateQueue": null,
                      },
                      "stateNode": <h3>
                        Signup
                      </h3>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "h3",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h3>
                          Signup
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-2",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h3>
                          Signup
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-2",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="col-md-6 login-form-1"
                  >
                    <h3
                      class="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control input-email"
                          name="email"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit btnLogin"
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>,
                  ],
                  "className": "row",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="row"
                >
                  <div
                    class="col-md-6 login-form-1"
                  >
                    <h3
                      class="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control input-email"
                          name="email"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit btnLogin"
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>
                  <div
                    class="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <div
                  className="row"
                >
                  <div
                    className="col-md-6 login-form-1"
                  >
                    <h3
                      className="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control input-email"
                          name="email"
                          onChange={[Function]}
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          name="password"
                          onChange={[Function]}
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit btnLogin"
                          onClick={[Function]}
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>
                  <div
                    className="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>
                </div>,
                "className": "container login-container",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <div
                  className="row"
                >
                  <div
                    className="col-md-6 login-form-1"
                  >
                    <h3
                      className="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control input-email"
                          name="email"
                          onChange={[Function]}
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          name="password"
                          onChange={[Function]}
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit btnLogin"
                          onClick={[Function]}
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>
                  <div
                    className="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>
                </div>,
                "className": "container login-container",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="container login-container"
              >
                <div
                  class="row"
                >
                  <div
                    class="col-md-6 login-form-1"
                  >
                    <h3
                      class="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control input-email"
                          name="email"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit btnLogin"
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>
                  <div
                    class="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>
                </div>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "authCheck": [Function],
              "login": undefined,
              "loginUser": [Function],
            },
            "memoizedState": Object {
              "email": "",
              "password": "",
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "authCheck": [Function],
              "login": undefined,
              "loginUser": [Function],
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 62,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                  "lineNumber": 31,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "login": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "login": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "login": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 61,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                  "lineNumber": 31,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "login": [MockFunction],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "login": [MockFunction],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 60,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "value": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 59,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 5,
                    "elementType": [Function],
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "memoizedState": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                      "storeState": Object {
                        "message": "",
                      },
                    },
                    "mode": 0,
                    "nextEffect": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 1,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": [Circular],
                      "index": 0,
                      "key": null,
                      "lastEffect": [Circular],
                      "memoizedProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "memoizedState": Object {
                        "context": null,
                        "mount": true,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "pendingProps": Object {
                        "Component": [Function],
                        "context": null,
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 56,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": [Circular],
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": null,
                          "expirationTime": 1073741823,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": null,
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": null,
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": Object {
                              "callback": null,
                              "expirationTime": 1073741823,
                              "next": null,
                              "nextEffect": null,
                              "payload": Object {
                                "element": <WrapperComponent
                                  Component={[Function]}
                                  context={null}
                                  props={
                                    Object {
                                      "children": <Connect(Login)
                                        login={[MockFunction]}
                                      />,
                                      "store": Object {
                                        "clearActions": [Function],
                                        "dispatch": [Function],
                                        "getActions": [Function],
                                        "getState": [Function],
                                        "replaceReducer": [Function],
                                        "subscribe": [Function],
                                      },
                                    }
                                  }
                                />,
                              },
                              "tag": 0,
                            },
                          },
                        },
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 32,
                        "elementType": null,
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": null,
                        "memoizedState": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                              Object {
                                "children": <Connect(Login)
                                  login={[MockFunction]}
                                />,
                                "store": Object {
                                  "clearActions": [Function],
                                  "dispatch": [Function],
                                  "getActions": [Function],
                                  "getState": [Function],
                                  "replaceReducer": [Function],
                                  "subscribe": [Function],
                                },
                              }
                            }
                          />,
                        },
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": null,
                        "ref": null,
                        "return": null,
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": Object {
                          "containerInfo": <div>
                            <div
                              class="container login-container"
                            >
                              <div
                                class="row"
                              >
                                <div
                                  class="col-md-6 login-form-1"
                                >
                                  <h3
                                    class="heading-class"
                                  >
                                    Login
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control input-email"
                                        name="email"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        name="password"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit btnLogin"
                                        type="submit"
                                        value="Login"
                                      />
                                    </div>
                                  </form>
                                </div>
                                <div
                                  class="col-md-6 login-form-2"
                                >
                                  <h3>
                                    Signup
                                  </h3>
                                  <form>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Email *"
                                        type="text"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="form-control"
                                        placeholder="Your Password *"
                                        type="password"
                                      />
                                    </div>
                                    <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>,
                          "context": Object {},
                          "current": [Circular],
                          "didError": false,
                          "earliestPendingTime": 0,
                          "earliestSuspendedTime": 0,
                          "expirationTime": 0,
                          "finishedWork": null,
                          "firstBatch": null,
                          "hydrate": false,
                          "interactionThreadID": 14,
                          "latestPendingTime": 0,
                          "latestPingedTime": 0,
                          "latestSuspendedTime": 0,
                          "memoizedInteractions": Set {},
                          "nextExpirationTimeToWorkOn": 0,
                          "nextScheduledRoot": null,
                          "pendingChildren": null,
                          "pendingCommitExpirationTime": 0,
                          "pendingContext": null,
                          "pendingInteractionMap": Map {},
                          "pingCache": null,
                          "timeoutHandle": -1,
                        },
                        "tag": 3,
                        "treeBaseDuration": 0,
                        "type": null,
                        "updateQueue": Object {
                          "baseState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "firstCapturedEffect": null,
                          "firstCapturedUpdate": null,
                          "firstEffect": null,
                          "firstUpdate": null,
                          "lastCapturedEffect": null,
                          "lastCapturedUpdate": null,
                          "lastEffect": null,
                          "lastUpdate": null,
                        },
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": WrapperComponent {
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Provider {
                      "_isMounted": true,
                      "_reactInternalFiber": [Circular],
                      "_reactInternalInstance": Object {},
                      "context": Object {},
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "refs": Object {},
                      "state": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "unsubscribe": [Function],
                      "updater": Object {
                        "enqueueForceUpdate": [Function],
                        "enqueueReplaceState": [Function],
                        "enqueueSetState": [Function],
                        "isMounted": [Function],
                      },
                    },
                    "tag": 1,
                    "treeBaseDuration": 0,
                    "type": [Function],
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": null,
                  "tag": 10,
                  "treeBaseDuration": 0,
                  "type": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": [Circular],
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                  },
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Connect {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "indirectRenderWrappedComponent": [Function],
                  "props": Object {
                    "login": [MockFunction],
                  },
                  "refs": Object {},
                  "selectChildElement": [Function],
                  "selectDerivedProps": [Function],
                  "state": null,
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "handleInputChange": [Function],
          "onSubmit": [Function],
          "props": Object {
            "authCheck": [Function],
            "login": undefined,
            "loginUser": [Function],
          },
          "refs": Object {},
          "state": Object {
            "email": "",
            "password": "",
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "authCheck": [Function],
          "login": undefined,
          "loginUser": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": <div
            class="container login-container"
          >
            <div
              class="row"
            >
              <div
                class="col-md-6 login-form-1"
              >
                <h3
                  class="heading-class"
                >
                  Login
                </h3>
                <form>
                  <div
                    class="form-group"
                  >
                    <input
                      class="form-control input-email"
                      name="email"
                      placeholder="Your Email *"
                      type="text"
                    />
                  </div>
                  <div
                    class="form-group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Your Password *"
                      type="password"
                    />
                  </div>
                  <div
                    class="form-group"
                  >
                    <input
                      class="btnSubmit btnLogin"
                      type="submit"
                      value="Login"
                    />
                  </div>
                </form>
              </div>
              <div
                class="col-md-6 login-form-2"
              >
                <h3>
                  Signup
                </h3>
                <form>
                  <div
                    class="form-group"
                  >
                    <input
                      class="form-control"
                      placeholder="Your Email *"
                      type="text"
                    />
                  </div>
                  <div
                    class="form-group"
                  >
                    <input
                      class="form-control"
                      placeholder="Your Password *"
                      type="password"
                    />
                  </div>
                  <div
                    class="form-group"
                  >
                    <input
                      class="btnSubmit"
                      type="submit"
                      value="Signup"
                    />
                  </div>
                </form>
              </div>
            </div>
          </div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="row"
            >
              <div
                className="col-md-6 login-form-1"
              >
                <h3
                  className="heading-class"
                >
                  Login
                </h3>
                <form>
                  <div
                    className="form-group"
                  >
                    <input
                      className="form-control input-email"
                      name="email"
                      onChange={[Function]}
                      placeholder="Your Email *"
                      type="text"
                    />
                  </div>
                  <div
                    className="form-group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Your Password *"
                      type="password"
                    />
                  </div>
                  <div
                    className="form-group"
                  >
                    <input
                      className="btnSubmit btnLogin"
                      onClick={[Function]}
                      type="submit"
                      value="Login"
                    />
                  </div>
                </form>
              </div>
              <div
                className="col-md-6 login-form-2"
              >
                <h3>
                  Signup
                </h3>
                <form>
                  <div
                    className="form-group"
                  >
                    <input
                      className="form-control"
                      placeholder="Your Email *"
                      type="text"
                    />
                  </div>
                  <div
                    className="form-group"
                  >
                    <input
                      className="form-control"
                      placeholder="Your Password *"
                      type="password"
                    />
                  </div>
                  <div
                    className="form-group"
                  >
                    <input
                      className="btnSubmit"
                      type="submit"
                      value="Signup"
                    />
                  </div>
                </form>
              </div>
            </div>,
            "className": "container login-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="row"
              >
                <div
                  class="col-md-6 login-form-1"
                >
                  <h3
                    class="heading-class"
                  >
                    Login
                  </h3>
                  <form>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control input-email"
                        name="email"
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        name="password"
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="btnSubmit btnLogin"
                        type="submit"
                        value="Login"
                      />
                    </div>
                  </form>
                </div>
                <div
                  class="col-md-6 login-form-2"
                >
                  <h3>
                    Signup
                  </h3>
                  <form>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="btnSubmit"
                        type="submit"
                        value="Signup"
                      />
                    </div>
                  </form>
                </div>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="col-md-6 login-form-1"
                  >
                    <h3
                      className="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control input-email"
                          name="email"
                          onChange={[Function]}
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          name="password"
                          onChange={[Function]}
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit btnLogin"
                          onClick={[Function]}
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>,
                  <div
                    className="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        className="form-group"
                      >
                        <input
                          className="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>,
                ],
                "className": "row",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="col-md-6 login-form-1"
                  >
                    <h3
                      class="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control input-email"
                          name="email"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit btnLogin"
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>,
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>,
                    ],
                    "className": "col-md-6 login-form-1",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <h3
                        class="heading-class"
                      >
                        Login
                      </h3>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Login",
                        "className": "heading-class",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Login",
                      ],
                      "type": "h3",
                    },
                    Object {
                      "instance": <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>,
                        ],
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "form-control input-email",
                                "name": "email",
                                "onChange": [Function],
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "form-control",
                                "name": "password",
                                "onChange": [Function],
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "btnSubmit btnLogin",
                                "onClick": [Function],
                                "type": "submit",
                                "value": "Login",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                      ],
                      "type": "form",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <h3>
                        Signup
                      </h3>,
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>,
                    ],
                    "className": "col-md-6 login-form-2",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <h3>
                        Signup
                      </h3>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Signup",
                      },
                      "ref": null,
                      "rendered": Array [
                        "Signup",
                      ],
                      "type": "h3",
                    },
                    Object {
                      "instance": <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>,
                        ],
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "form-control",
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "form-control",
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                        Object {
                          "instance": <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "rendered": Array [
                            Object {
                              "instance": <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />,
                              "key": undefined,
                              "nodeType": "host",
                              "props": Object {
                                "className": "btnSubmit",
                                "type": "submit",
                                "value": "Signup",
                              },
                              "ref": null,
                              "rendered": Array [
                                undefined,
                              ],
                              "type": "input",
                            },
                          ],
                          "type": "div",
                        },
                      ],
                      "type": "form",
                    },
                  ],
                  "type": "div",
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Provider {
        "_isMounted": true,
        "_reactInternalFiber": FiberNode {
          "_debugID": 59,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 58,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 60,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 61,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": Object {
                "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                "lineNumber": 31,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 63,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 64,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 33,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 65,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 34,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 66,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 35,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 68,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 36,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "h3",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Login",
                            "className": "heading-class",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Login",
                            "className": "heading-class",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 69,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 37,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 70,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 38,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 73,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 39,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control input-email",
                                  "name": "email",
                                  "onChange": [Function],
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control input-email",
                                  "name": "email",
                                  "onChange": [Function],
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 71,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 47,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 74,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 48,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "name": "password",
                                    "onChange": [Function],
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="form-control"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="form-control"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 72,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 56,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 75,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                      "lineNumber": 57,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "btnSubmit btnLogin",
                                      "onClick": [Function],
                                      "type": "submit",
                                      "value": "Login",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "btnSubmit btnLogin",
                                      "onClick": [Function],
                                      "type": "submit",
                                      "value": "Login",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <input
                                      className="btnSubmit btnLogin"
                                      onClick={[Function]}
                                      type="submit"
                                      value="Login"
                                    />,
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <input
                                      className="btnSubmit btnLogin"
                                      onClick={[Function]}
                                      type="submit"
                                      value="Login"
                                    />,
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "form",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control input-email"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />
                                </div>,
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control input-email"
                                    name="email"
                                    onChange={[Function]}
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    name="password"
                                    onChange={[Function]}
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />
                                </div>,
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "form",
                            "updateQueue": null,
                          },
                          "stateNode": <h3
                            class="heading-class"
                          >
                            Login
                          </h3>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "h3",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h3
                              className="heading-class"
                            >
                              Login
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-1",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h3
                              className="heading-class"
                            >
                              Login
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-1",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 67,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 71,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 76,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 72,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "h3",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Signup",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Signup",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 77,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 73,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 78,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 74,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 81,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 75,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Email *",
                                    "type": "text",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Email *",
                                    "type": "text",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 79,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 81,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 82,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                      "lineNumber": 82,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "form-control",
                                      "placeholder": "Your Password *",
                                      "type": "password",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "form-control",
                                      "placeholder": "Your Password *",
                                      "type": "password",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 1,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <input
                                      className="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />,
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <input
                                      className="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />,
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": FiberNode {
                                    "_debugID": 80,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                      "lineNumber": 88,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": FiberNode {
                                      "_debugID": 83,
                                      "_debugIsCurrentlyTiming": false,
                                      "_debugOwner": [Circular],
                                      "_debugSource": Object {
                                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                        "lineNumber": 89,
                                      },
                                      "actualDuration": 0,
                                      "actualStartTime": -1,
                                      "alternate": null,
                                      "child": null,
                                      "childExpirationTime": 0,
                                      "contextDependencies": null,
                                      "effectTag": 0,
                                      "elementType": "input",
                                      "expirationTime": 0,
                                      "firstEffect": null,
                                      "index": 0,
                                      "key": null,
                                      "lastEffect": null,
                                      "memoizedProps": Object {
                                        "className": "btnSubmit",
                                        "type": "submit",
                                        "value": "Signup",
                                      },
                                      "memoizedState": null,
                                      "mode": 0,
                                      "nextEffect": null,
                                      "pendingProps": Object {
                                        "className": "btnSubmit",
                                        "type": "submit",
                                        "value": "Signup",
                                      },
                                      "ref": null,
                                      "return": [Circular],
                                      "selfBaseDuration": 0,
                                      "sibling": null,
                                      "stateNode": <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />,
                                      "tag": 5,
                                      "treeBaseDuration": 0,
                                      "type": "input",
                                      "updateQueue": null,
                                    },
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "div",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 2,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "children": <input
                                        className="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />,
                                      "className": "form-group",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "children": <input
                                        className="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />,
                                      "className": "form-group",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <div
                                      class="form-group"
                                    >
                                      <input
                                        class="btnSubmit"
                                        type="submit"
                                        value="Signup"
                                      />
                                    </div>,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "div",
                                    "updateQueue": null,
                                  },
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "form",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>,
                                ],
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": Array [
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>,
                                  <div
                                    className="form-group"
                                  >
                                    <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>,
                                ],
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "form",
                              "updateQueue": null,
                            },
                            "stateNode": <h3>
                              Signup
                            </h3>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "h3",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <h3>
                                Signup
                              </h3>,
                              <form>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>,
                            ],
                            "className": "col-md-6 login-form-2",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <h3>
                                Signup
                              </h3>,
                              <form>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>,
                            ],
                            "className": "col-md-6 login-form-2",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <div
                            class="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <div
                            className="col-md-6 login-form-1"
                          >
                            <h3
                              className="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>,
                          <div
                            className="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>,
                        ],
                        "className": "row",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <div
                            className="col-md-6 login-form-1"
                          >
                            <h3
                              className="heading-class"
                            >
                              Login
                            </h3>
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>
                            </form>
                          </div>,
                          <div
                            className="col-md-6 login-form-2"
                          >
                            <h3>
                              Signup
                            </h3>
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>
                          </div>,
                        ],
                        "className": "row",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <div
                        className="row"
                      >
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>,
                      "className": "container login-container",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <div
                        className="row"
                      >
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>,
                      "className": "container login-container",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "authCheck": [Function],
                    "login": undefined,
                    "loginUser": [Function],
                  },
                  "memoizedState": Object {
                    "email": "",
                    "password": "",
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "authCheck": [Function],
                    "login": undefined,
                    "loginUser": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Login {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "handleInputChange": [Function],
                    "onSubmit": [Function],
                    "props": Object {
                      "authCheck": [Function],
                      "login": undefined,
                      "loginUser": [Function],
                    },
                    "refs": Object {},
                    "state": Object {
                      "email": "",
                      "password": "",
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "login": [MockFunction],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "login": [MockFunction],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Connect {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "indirectRenderWrappedComponent": [Function],
                "props": Object {
                  "login": [MockFunction],
                },
                "refs": Object {},
                "selectChildElement": [Function],
                "selectDerivedProps": [Function],
                "state": null,
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 0,
            "elementType": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <Connect(Login)
                login={[MockFunction]}
              />,
              "value": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeState": Object {
                  "message": "",
                },
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": null,
            "tag": 10,
            "treeBaseDuration": 0,
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": Object {},
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "contextDependencies": null,
          "effectTag": 5,
          "elementType": [Function],
          "expirationTime": 0,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <Connect(Login)
              login={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "memoizedState": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeState": Object {
              "message": "",
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 58,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "pendingProps": Object {
            "children": <Connect(Login)
              login={[MockFunction]}
            />,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 58,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 56,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 56,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="container login-container"
                    >
                      <div
                        class="row"
                      >
                        <div
                          class="col-md-6 login-form-1"
                        >
                          <h3
                            class="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>
                        <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 14,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 14,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "props": Object {
          "children": <Connect(Login)
            login={[MockFunction]}
          />,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeState": Object {
            "message": "",
          },
        },
        "unsubscribe": [Function],
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(Login)
          login={[MockFunction]}
        />,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": Connect {
          "_reactInternalFiber": FiberNode {
            "_debugID": 61,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": Object {
              "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
              "lineNumber": 31,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 62,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 63,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 64,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                    "lineNumber": 33,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 65,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 34,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 66,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 35,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 68,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 36,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "h3",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Login",
                          "className": "heading-class",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Login",
                          "className": "heading-class",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 69,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 37,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 70,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 38,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 73,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 39,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control input-email",
                                "name": "email",
                                "onChange": [Function],
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control input-email",
                                "name": "email",
                                "onChange": [Function],
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 71,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 47,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 74,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 48,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 72,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 56,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 75,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 57,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "btnSubmit btnLogin",
                                    "onClick": [Function],
                                    "type": "submit",
                                    "value": "Login",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "btnSubmit btnLogin",
                                    "onClick": [Function],
                                    "type": "submit",
                                    "value": "Login",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="btnSubmit btnLogin"
                                    onClick={[Function]}
                                    type="submit"
                                    value="Login"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control input-email"
                                  name="email"
                                  onChange={[Function]}
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  name="password"
                                  onChange={[Function]}
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "stateNode": <h3
                          class="heading-class"
                        >
                          Login
                        </h3>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "h3",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-1",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-1",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 67,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 71,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 76,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 72,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "h3",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Signup",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Signup",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 77,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 73,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 78,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 74,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 81,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 75,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 79,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 81,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 82,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 82,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "form-control",
                                    "placeholder": "Your Password *",
                                    "type": "password",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 1,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": FiberNode {
                                  "_debugID": 80,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 88,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": FiberNode {
                                    "_debugID": 83,
                                    "_debugIsCurrentlyTiming": false,
                                    "_debugOwner": [Circular],
                                    "_debugSource": Object {
                                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                      "lineNumber": 89,
                                    },
                                    "actualDuration": 0,
                                    "actualStartTime": -1,
                                    "alternate": null,
                                    "child": null,
                                    "childExpirationTime": 0,
                                    "contextDependencies": null,
                                    "effectTag": 0,
                                    "elementType": "input",
                                    "expirationTime": 0,
                                    "firstEffect": null,
                                    "index": 0,
                                    "key": null,
                                    "lastEffect": null,
                                    "memoizedProps": Object {
                                      "className": "btnSubmit",
                                      "type": "submit",
                                      "value": "Signup",
                                    },
                                    "memoizedState": null,
                                    "mode": 0,
                                    "nextEffect": null,
                                    "pendingProps": Object {
                                      "className": "btnSubmit",
                                      "type": "submit",
                                      "value": "Signup",
                                    },
                                    "ref": null,
                                    "return": [Circular],
                                    "selfBaseDuration": 0,
                                    "sibling": null,
                                    "stateNode": <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "tag": 5,
                                    "treeBaseDuration": 0,
                                    "type": "input",
                                    "updateQueue": null,
                                  },
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "div",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 2,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "children": <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "className": "form-group",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "children": <input
                                      className="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />,
                                    "className": "form-group",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "div",
                                  "updateQueue": null,
                                },
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "form",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                              ],
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": Array [
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>,
                                <div
                                  className="form-group"
                                >
                                  <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                              ],
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <form>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "form",
                            "updateQueue": null,
                          },
                          "stateNode": <h3>
                            Signup
                          </h3>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "h3",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <h3>
                              Signup
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-2",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <h3>
                              Signup
                            </h3>,
                            <form>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>
                            </form>,
                          ],
                          "className": "col-md-6 login-form-2",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <div
                          class="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>,
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                      ],
                      "className": "row",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <div
                          className="col-md-6 login-form-1"
                        >
                          <h3
                            className="heading-class"
                          >
                            Login
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>
                          </form>
                        </div>,
                        <div
                          className="col-md-6 login-form-2"
                        >
                          <h3>
                            Signup
                          </h3>
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>
                        </div>,
                      ],
                      "className": "row",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <div
                      className="row"
                    >
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "className": "container login-container",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <div
                      className="row"
                    >
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>,
                    "className": "container login-container",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="container login-container"
                  >
                    <div
                      class="row"
                    >
                      <div
                        class="col-md-6 login-form-1"
                      >
                        <h3
                          class="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>
                      <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 1,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "authCheck": [Function],
                  "login": undefined,
                  "loginUser": [Function],
                },
                "memoizedState": Object {
                  "email": "",
                  "password": "",
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "authCheck": [Function],
                  "login": undefined,
                  "loginUser": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Login {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "handleInputChange": [Function],
                  "onSubmit": [Function],
                  "props": Object {
                    "authCheck": [Function],
                    "login": undefined,
                    "loginUser": [Function],
                  },
                  "refs": Object {},
                  "state": Object {
                    "email": "",
                    "password": "",
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": Object {
                "expirationTime": 0,
                "first": Object {
                  "context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": Object {
                      "$$typeof": Symbol(react.context),
                      "_calculateChangedBits": null,
                      "_context": [Circular],
                    },
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                  "next": null,
                  "observedBits": 1073741823,
                },
              },
              "effectTag": 1,
              "elementType": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 9,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": [Circular],
                  "Provider": Object {
                    "$$typeof": Symbol(react.provider),
                    "_context": [Circular],
                  },
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "contextDependencies": null,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "login": [MockFunction],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "login": [MockFunction],
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 60,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 59,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 5,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "memoizedState": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "pendingProps": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Provider {
                  "_isMounted": true,
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "storeState": Object {
                      "message": "",
                    },
                  },
                  "unsubscribe": [Function],
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 0,
              "elementType": Object {
                "$$typeof": Symbol(react.provider),
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": [Circular],
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "value": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <Connect(Login)
                  login={[MockFunction]}
                />,
                "value": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 59,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 5,
                "elementType": [Function],
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "memoizedState": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "storeState": Object {
                    "message": "",
                  },
                },
                "mode": 0,
                "nextEffect": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "pendingProps": Object {
                  "children": <Connect(Login)
                    login={[MockFunction]}
                  />,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 58,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "memoizedState": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "mode": 0,
                  "nextEffect": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "pendingProps": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": FiberNode {
                      "_debugID": 56,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": [Circular],
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": null,
                      "expirationTime": 1073741823,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": null,
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": null,
                      "ref": null,
                      "return": null,
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Object {
                        "containerInfo": <div>
                          <div
                            class="container login-container"
                          >
                            <div
                              class="row"
                            >
                              <div
                                class="col-md-6 login-form-1"
                              >
                                <h3
                                  class="heading-class"
                                >
                                  Login
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control input-email"
                                      name="email"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      name="password"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit btnLogin"
                                      type="submit"
                                      value="Login"
                                    />
                                  </div>
                                </form>
                              </div>
                              <div
                                class="col-md-6 login-form-2"
                              >
                                <h3>
                                  Signup
                                </h3>
                                <form>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Email *"
                                      type="text"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="form-control"
                                      placeholder="Your Password *"
                                      type="password"
                                    />
                                  </div>
                                  <div
                                    class="form-group"
                                  >
                                    <input
                                      class="btnSubmit"
                                      type="submit"
                                      value="Signup"
                                    />
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </div>,
                        "context": Object {},
                        "current": [Circular],
                        "didError": false,
                        "earliestPendingTime": 0,
                        "earliestSuspendedTime": 0,
                        "expirationTime": 0,
                        "finishedWork": null,
                        "firstBatch": null,
                        "hydrate": false,
                        "interactionThreadID": 14,
                        "latestPendingTime": 0,
                        "latestPingedTime": 0,
                        "latestSuspendedTime": 0,
                        "memoizedInteractions": Set {},
                        "nextExpirationTimeToWorkOn": 0,
                        "nextScheduledRoot": null,
                        "pendingChildren": null,
                        "pendingCommitExpirationTime": 0,
                        "pendingContext": null,
                        "pendingInteractionMap": Map {},
                        "pingCache": null,
                        "timeoutHandle": -1,
                      },
                      "tag": 3,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": Object {
                        "baseState": null,
                        "firstCapturedEffect": null,
                        "firstCapturedUpdate": null,
                        "firstEffect": null,
                        "firstUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                        "lastCapturedEffect": null,
                        "lastCapturedUpdate": null,
                        "lastEffect": null,
                        "lastUpdate": Object {
                          "callback": null,
                          "expirationTime": 1073741823,
                          "next": null,
                          "nextEffect": null,
                          "payload": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "tag": 0,
                        },
                      },
                    },
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 32,
                    "elementType": null,
                    "expirationTime": 0,
                    "firstEffect": [Circular],
                    "index": 0,
                    "key": null,
                    "lastEffect": [Circular],
                    "memoizedProps": null,
                    "memoizedState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          }
                        }
                      />,
                    },
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                          class="container login-container"
                        >
                          <div
                            class="row"
                          >
                            <div
                              class="col-md-6 login-form-1"
                            >
                              <h3
                                class="heading-class"
                              >
                                Login
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control input-email"
                                    name="email"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    name="password"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit btnLogin"
                                    type="submit"
                                    value="Login"
                                  />
                                </div>
                              </form>
                            </div>
                            <div
                              class="col-md-6 login-form-2"
                            >
                              <h3>
                                Signup
                              </h3>
                              <form>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Email *"
                                    type="text"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="form-control"
                                    placeholder="Your Password *"
                                    type="password"
                                  />
                                </div>
                                <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 14,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "pingCache": null,
                      "timeoutHandle": -1,
                    },
                    "tag": 3,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                            Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            }
                          }
                        />,
                      },
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": null,
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": null,
                    },
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": WrapperComponent {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "props": Object {
                      "Component": [Function],
                      "context": null,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "refs": Object {},
                    "state": Object {
                      "context": null,
                      "mount": true,
                      "props": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                    },
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Provider {
                  "_isMounted": true,
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "children": <Connect(Login)
                      login={[MockFunction]}
                    />,
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                    "storeState": Object {
                      "message": "",
                    },
                  },
                  "unsubscribe": [Function],
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 1,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": null,
              "tag": 10,
              "treeBaseDuration": 0,
              "type": Object {
                "$$typeof": Symbol(react.provider),
                "_context": Object {
                  "$$typeof": Symbol(react.context),
                  "Consumer": Object {
                    "$$typeof": Symbol(react.context),
                    "_calculateChangedBits": null,
                    "_context": [Circular],
                  },
                  "Provider": [Circular],
                  "_calculateChangedBits": null,
                  "_currentRenderer": Object {},
                  "_currentRenderer2": null,
                  "_currentValue": null,
                  "_currentValue2": null,
                  "_threadCount": 0,
                },
              },
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "indirectRenderWrappedComponent": [Function],
          "props": Object {
            "login": [MockFunction],
          },
          "refs": Object {},
          "selectChildElement": [Function],
          "selectDerivedProps": [Function],
          "state": null,
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "login": [MockFunction],
        },
        "ref": null,
        "rendered": Object {
          "instance": Login {
            "_reactInternalFiber": FiberNode {
              "_debugID": 63,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 61,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                    "lineNumber": 31,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "login": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "login": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "login": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 61,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                    "lineNumber": 31,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "login": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "login": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "login": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 64,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                  "lineNumber": 33,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 65,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                    "lineNumber": 34,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 66,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                      "lineNumber": 35,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 68,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 36,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "h3",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": "Login",
                        "className": "heading-class",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": "Login",
                        "className": "heading-class",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 69,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 37,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 70,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 38,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 73,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 39,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "input",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "form-control input-email",
                              "name": "email",
                              "onChange": [Function],
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "form-control input-email",
                              "name": "email",
                              "onChange": [Function],
                              "placeholder": "Your Email *",
                              "type": "text",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />,
                            "className": "form-group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 71,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 47,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 74,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 48,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control",
                                "name": "password",
                                "onChange": [Function],
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control",
                                "name": "password",
                                "onChange": [Function],
                                "placeholder": "Your Password *",
                                "type": "password",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 1,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 72,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 56,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 75,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 57,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "btnSubmit btnLogin",
                                  "onClick": [Function],
                                  "type": "submit",
                                  "value": "Login",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "btnSubmit btnLogin",
                                  "onClick": [Function],
                                  "type": "submit",
                                  "value": "Login",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 2,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="btnSubmit btnLogin"
                                  onClick={[Function]}
                                  type="submit"
                                  value="Login"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "form",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 1,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>,
                          ],
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>,
                          ],
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "form",
                        "updateQueue": null,
                      },
                      "stateNode": <h3
                        class="heading-class"
                      >
                        Login
                      </h3>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "h3",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": Array [
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-1",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": Array [
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-1",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 67,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": Object {
                        "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                        "lineNumber": 71,
                      },
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 76,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": Object {
                          "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                          "lineNumber": 72,
                        },
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 0,
                        "elementType": "h3",
                        "expirationTime": 0,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": "Signup",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": "Signup",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 77,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": Object {
                            "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                            "lineNumber": 73,
                          },
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 78,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": Object {
                              "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                              "lineNumber": 74,
                            },
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": FiberNode {
                              "_debugID": 81,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 75,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": null,
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "input",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 0,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "className": "form-control",
                                "placeholder": "Your Email *",
                                "type": "text",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": null,
                              "stateNode": <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "input",
                              "updateQueue": null,
                            },
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": "div",
                            "expirationTime": 0,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": FiberNode {
                              "_debugID": 79,
                              "_debugIsCurrentlyTiming": false,
                              "_debugOwner": [Circular],
                              "_debugSource": Object {
                                "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                "lineNumber": 81,
                              },
                              "actualDuration": 0,
                              "actualStartTime": -1,
                              "alternate": null,
                              "child": FiberNode {
                                "_debugID": 82,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 82,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": null,
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "input",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 0,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "input",
                                "updateQueue": null,
                              },
                              "childExpirationTime": 0,
                              "contextDependencies": null,
                              "effectTag": 0,
                              "elementType": "div",
                              "expirationTime": 0,
                              "firstEffect": null,
                              "index": 1,
                              "key": null,
                              "lastEffect": null,
                              "memoizedProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "memoizedState": null,
                              "mode": 0,
                              "nextEffect": null,
                              "pendingProps": Object {
                                "children": <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "className": "form-group",
                              },
                              "ref": null,
                              "return": [Circular],
                              "selfBaseDuration": 0,
                              "sibling": FiberNode {
                                "_debugID": 80,
                                "_debugIsCurrentlyTiming": false,
                                "_debugOwner": [Circular],
                                "_debugSource": Object {
                                  "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                  "lineNumber": 88,
                                },
                                "actualDuration": 0,
                                "actualStartTime": -1,
                                "alternate": null,
                                "child": FiberNode {
                                  "_debugID": 83,
                                  "_debugIsCurrentlyTiming": false,
                                  "_debugOwner": [Circular],
                                  "_debugSource": Object {
                                    "fileName": "/home/nuwanp/mini-pos/client/src/components/Login.js",
                                    "lineNumber": 89,
                                  },
                                  "actualDuration": 0,
                                  "actualStartTime": -1,
                                  "alternate": null,
                                  "child": null,
                                  "childExpirationTime": 0,
                                  "contextDependencies": null,
                                  "effectTag": 0,
                                  "elementType": "input",
                                  "expirationTime": 0,
                                  "firstEffect": null,
                                  "index": 0,
                                  "key": null,
                                  "lastEffect": null,
                                  "memoizedProps": Object {
                                    "className": "btnSubmit",
                                    "type": "submit",
                                    "value": "Signup",
                                  },
                                  "memoizedState": null,
                                  "mode": 0,
                                  "nextEffect": null,
                                  "pendingProps": Object {
                                    "className": "btnSubmit",
                                    "type": "submit",
                                    "value": "Signup",
                                  },
                                  "ref": null,
                                  "return": [Circular],
                                  "selfBaseDuration": 0,
                                  "sibling": null,
                                  "stateNode": <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "tag": 5,
                                  "treeBaseDuration": 0,
                                  "type": "input",
                                  "updateQueue": null,
                                },
                                "childExpirationTime": 0,
                                "contextDependencies": null,
                                "effectTag": 0,
                                "elementType": "div",
                                "expirationTime": 0,
                                "firstEffect": null,
                                "index": 2,
                                "key": null,
                                "lastEffect": null,
                                "memoizedProps": Object {
                                  "children": <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "className": "form-group",
                                },
                                "memoizedState": null,
                                "mode": 0,
                                "nextEffect": null,
                                "pendingProps": Object {
                                  "children": <input
                                    className="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />,
                                  "className": "form-group",
                                },
                                "ref": null,
                                "return": [Circular],
                                "selfBaseDuration": 0,
                                "sibling": null,
                                "stateNode": <div
                                  class="form-group"
                                >
                                  <input
                                    class="btnSubmit"
                                    type="submit"
                                    value="Signup"
                                  />
                                </div>,
                                "tag": 5,
                                "treeBaseDuration": 0,
                                "type": "div",
                                "updateQueue": null,
                              },
                              "stateNode": <div
                                class="form-group"
                              >
                                <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              "tag": 5,
                              "treeBaseDuration": 0,
                              "type": "div",
                              "updateQueue": null,
                            },
                            "stateNode": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "div",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 0,
                          "elementType": "form",
                          "expirationTime": 0,
                          "firstEffect": null,
                          "index": 1,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>,
                            ],
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": Array [
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />
                              </div>,
                              <div
                                className="form-group"
                              >
                                <input
                                  className="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />
                              </div>,
                            ],
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <form>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "form",
                          "updateQueue": null,
                        },
                        "stateNode": <h3>
                          Signup
                        </h3>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "h3",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": Array [
                          <h3>
                            Signup
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-2",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": Array [
                          <h3>
                            Signup
                          </h3>,
                          <form>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>
                          </form>,
                        ],
                        "className": "col-md-6 login-form-2",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <div
                        class="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                    ],
                    "className": "row",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="col-md-6 login-form-1"
                      >
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>
                      </div>,
                      <div
                        className="col-md-6 login-form-2"
                      >
                        <h3>
                          Signup
                        </h3>
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>
                      </div>,
                    ],
                    "className": "row",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "contextDependencies": null,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <div
                    className="row"
                  >
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "className": "container login-container",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <div
                    className="row"
                  >
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>,
                  "className": "container login-container",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="container login-container"
                >
                  <div
                    class="row"
                  >
                    <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>
                    <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>
                  </div>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "contextDependencies": null,
              "effectTag": 1,
              "elementType": [Function],
              "expirationTime": 0,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "authCheck": [Function],
                "login": undefined,
                "loginUser": [Function],
              },
              "memoizedState": Object {
                "email": "",
                "password": "",
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "authCheck": [Function],
                "login": undefined,
                "loginUser": [Function],
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 62,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": FiberNode {
                  "_debugID": 61,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                    "lineNumber": 31,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "login": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "login": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "login": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "contextDependencies": Object {
                  "expirationTime": 0,
                  "first": Object {
                    "context": Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    },
                    "next": null,
                    "observedBits": 1073741823,
                  },
                },
                "effectTag": 1,
                "elementType": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "expirationTime": 0,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": [Function],
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 61,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": Object {
                    "fileName": "/home/nuwanp/mini-pos/client/src/__test__/loginComponent.test.js",
                    "lineNumber": 31,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "contextDependencies": null,
                  "effectTag": 1,
                  "elementType": [Function],
                  "expirationTime": 0,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "login": [MockFunction],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "login": [MockFunction],
                  },
                  "ref": null,
                  "return": FiberNode {
                    "_debugID": 60,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": [Circular],
                    "childExpirationTime": 0,
                    "contextDependencies": null,
                    "effectTag": 0,
                    "elementType": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "expirationTime": 0,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <Connect(Login)
                        login={[MockFunction]}
                      />,
                      "value": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                    },
                    "ref": null,
                    "return": FiberNode {
                      "_debugID": 59,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": [Circular],
                      "childExpirationTime": 0,
                      "contextDependencies": null,
                      "effectTag": 5,
                      "elementType": [Function],
                      "expirationTime": 0,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "memoizedState": Object {
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                        "storeState": Object {
                          "message": "",
                        },
                      },
                      "mode": 0,
                      "nextEffect": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "pendingProps": Object {
                        "children": <Connect(Login)
                          login={[MockFunction]}
                        />,
                        "store": Object {
                          "clearActions": [Function],
                          "dispatch": [Function],
                          "getActions": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                        },
                      },
                      "ref": null,
                      "return": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": null,
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": [Circular],
                        "childExpirationTime": 0,
                        "contextDependencies": null,
                        "effectTag": 1,
                        "elementType": [Function],
                        "expirationTime": 0,
                        "firstEffect": [Circular],
                        "index": 0,
                        "key": null,
                        "lastEffect": [Circular],
                        "memoizedProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "memoizedState": Object {
                          "context": null,
                          "mount": true,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "mode": 0,
                        "nextEffect": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "pendingProps": Object {
                          "Component": [Function],
                          "context": null,
                          "props": Object {
                            "children": <Connect(Login)
                              login={[MockFunction]}
                            />,
                            "store": Object {
                              "clearActions": [Function],
                              "dispatch": [Function],
                              "getActions": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            },
                          },
                        },
                        "ref": null,
                        "return": FiberNode {
                          "_debugID": 56,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": null,
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": FiberNode {
                            "_debugID": 56,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": null,
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": [Circular],
                            "child": null,
                            "childExpirationTime": 0,
                            "contextDependencies": null,
                            "effectTag": 0,
                            "elementType": null,
                            "expirationTime": 1073741823,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": null,
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": null,
                            "ref": null,
                            "return": null,
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": Object {
                              "containerInfo": <div>
                                <div
                                  class="container login-container"
                                >
                                  <div
                                    class="row"
                                  >
                                    <div
                                      class="col-md-6 login-form-1"
                                    >
                                      <h3
                                        class="heading-class"
                                      >
                                        Login
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control input-email"
                                            name="email"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            name="password"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit btnLogin"
                                            type="submit"
                                            value="Login"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                    <div
                                      class="col-md-6 login-form-2"
                                    >
                                      <h3>
                                        Signup
                                      </h3>
                                      <form>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Email *"
                                            type="text"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="form-control"
                                            placeholder="Your Password *"
                                            type="password"
                                          />
                                        </div>
                                        <div
                                          class="form-group"
                                        >
                                          <input
                                            class="btnSubmit"
                                            type="submit"
                                            value="Signup"
                                          />
                                        </div>
                                      </form>
                                    </div>
                                  </div>
                                </div>
                              </div>,
                              "context": Object {},
                              "current": [Circular],
                              "didError": false,
                              "earliestPendingTime": 0,
                              "earliestSuspendedTime": 0,
                              "expirationTime": 0,
                              "finishedWork": null,
                              "firstBatch": null,
                              "hydrate": false,
                              "interactionThreadID": 14,
                              "latestPendingTime": 0,
                              "latestPingedTime": 0,
                              "latestSuspendedTime": 0,
                              "memoizedInteractions": Set {},
                              "nextExpirationTimeToWorkOn": 0,
                              "nextScheduledRoot": null,
                              "pendingChildren": null,
                              "pendingCommitExpirationTime": 0,
                              "pendingContext": null,
                              "pendingInteractionMap": Map {},
                              "pingCache": null,
                              "timeoutHandle": -1,
                            },
                            "tag": 3,
                            "treeBaseDuration": 0,
                            "type": null,
                            "updateQueue": Object {
                              "baseState": null,
                              "firstCapturedEffect": null,
                              "firstCapturedUpdate": null,
                              "firstEffect": null,
                              "firstUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                              "lastCapturedEffect": null,
                              "lastCapturedUpdate": null,
                              "lastEffect": null,
                              "lastUpdate": Object {
                                "callback": null,
                                "expirationTime": 1073741823,
                                "next": null,
                                "nextEffect": null,
                                "payload": Object {
                                  "element": <WrapperComponent
                                    Component={[Function]}
                                    context={null}
                                    props={
                                      Object {
                                        "children": <Connect(Login)
                                          login={[MockFunction]}
                                        />,
                                        "store": Object {
                                          "clearActions": [Function],
                                          "dispatch": [Function],
                                          "getActions": [Function],
                                          "getState": [Function],
                                          "replaceReducer": [Function],
                                          "subscribe": [Function],
                                        },
                                      }
                                    }
                                  />,
                                },
                                "tag": 0,
                              },
                            },
                          },
                          "child": [Circular],
                          "childExpirationTime": 0,
                          "contextDependencies": null,
                          "effectTag": 32,
                          "elementType": null,
                          "expirationTime": 0,
                          "firstEffect": [Circular],
                          "index": 0,
                          "key": null,
                          "lastEffect": [Circular],
                          "memoizedProps": null,
                          "memoizedState": Object {
                            "element": <WrapperComponent
                              Component={[Function]}
                              context={null}
                              props={
                                Object {
                                  "children": <Connect(Login)
                                    login={[MockFunction]}
                                  />,
                                  "store": Object {
                                    "clearActions": [Function],
                                    "dispatch": [Function],
                                    "getActions": [Function],
                                    "getState": [Function],
                                    "replaceReducer": [Function],
                                    "subscribe": [Function],
                                  },
                                }
                              }
                            />,
                          },
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": null,
                          "ref": null,
                          "return": null,
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": Object {
                            "containerInfo": <div>
                              <div
                                class="container login-container"
                              >
                                <div
                                  class="row"
                                >
                                  <div
                                    class="col-md-6 login-form-1"
                                  >
                                    <h3
                                      class="heading-class"
                                    >
                                      Login
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control input-email"
                                          name="email"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          name="password"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit btnLogin"
                                          type="submit"
                                          value="Login"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                  <div
                                    class="col-md-6 login-form-2"
                                  >
                                    <h3>
                                      Signup
                                    </h3>
                                    <form>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Email *"
                                          type="text"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="form-control"
                                          placeholder="Your Password *"
                                          type="password"
                                        />
                                      </div>
                                      <div
                                        class="form-group"
                                      >
                                        <input
                                          class="btnSubmit"
                                          type="submit"
                                          value="Signup"
                                        />
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>,
                            "context": Object {},
                            "current": [Circular],
                            "didError": false,
                            "earliestPendingTime": 0,
                            "earliestSuspendedTime": 0,
                            "expirationTime": 0,
                            "finishedWork": null,
                            "firstBatch": null,
                            "hydrate": false,
                            "interactionThreadID": 14,
                            "latestPendingTime": 0,
                            "latestPingedTime": 0,
                            "latestSuspendedTime": 0,
                            "memoizedInteractions": Set {},
                            "nextExpirationTimeToWorkOn": 0,
                            "nextScheduledRoot": null,
                            "pendingChildren": null,
                            "pendingCommitExpirationTime": 0,
                            "pendingContext": null,
                            "pendingInteractionMap": Map {},
                            "pingCache": null,
                            "timeoutHandle": -1,
                          },
                          "tag": 3,
                          "treeBaseDuration": 0,
                          "type": null,
                          "updateQueue": Object {
                            "baseState": Object {
                              "element": <WrapperComponent
                                Component={[Function]}
                                context={null}
                                props={
                                  Object {
                                    "children": <Connect(Login)
                                      login={[MockFunction]}
                                    />,
                                    "store": Object {
                                      "clearActions": [Function],
                                      "dispatch": [Function],
                                      "getActions": [Function],
                                      "getState": [Function],
                                      "replaceReducer": [Function],
                                      "subscribe": [Function],
                                    },
                                  }
                                }
                              />,
                            },
                            "firstCapturedEffect": null,
                            "firstCapturedUpdate": null,
                            "firstEffect": null,
                            "firstUpdate": null,
                            "lastCapturedEffect": null,
                            "lastCapturedUpdate": null,
                            "lastEffect": null,
                            "lastUpdate": null,
                          },
                        },
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": WrapperComponent {
                          "_reactInternalFiber": [Circular],
                          "_reactInternalInstance": Object {},
                          "context": Object {},
                          "props": Object {
                            "Component": [Function],
                            "context": null,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "refs": Object {},
                          "state": Object {
                            "context": null,
                            "mount": true,
                            "props": Object {
                              "children": <Connect(Login)
                                login={[MockFunction]}
                              />,
                              "store": Object {
                                "clearActions": [Function],
                                "dispatch": [Function],
                                "getActions": [Function],
                                "getState": [Function],
                                "replaceReducer": [Function],
                                "subscribe": [Function],
                              },
                            },
                          },
                          "updater": Object {
                            "enqueueForceUpdate": [Function],
                            "enqueueReplaceState": [Function],
                            "enqueueSetState": [Function],
                            "isMounted": [Function],
                          },
                        },
                        "tag": 1,
                        "treeBaseDuration": 0,
                        "type": [Function],
                        "updateQueue": null,
                      },
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": Provider {
                        "_isMounted": true,
                        "_reactInternalFiber": [Circular],
                        "_reactInternalInstance": Object {},
                        "context": Object {},
                        "props": Object {
                          "children": <Connect(Login)
                            login={[MockFunction]}
                          />,
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                        },
                        "refs": Object {},
                        "state": Object {
                          "store": Object {
                            "clearActions": [Function],
                            "dispatch": [Function],
                            "getActions": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                          },
                          "storeState": Object {
                            "message": "",
                          },
                        },
                        "unsubscribe": [Function],
                        "updater": Object {
                          "enqueueForceUpdate": [Function],
                          "enqueueReplaceState": [Function],
                          "enqueueSetState": [Function],
                          "isMounted": [Function],
                        },
                      },
                      "tag": 1,
                      "treeBaseDuration": 0,
                      "type": [Function],
                      "updateQueue": null,
                    },
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 10,
                    "treeBaseDuration": 0,
                    "type": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": Object {
                        "$$typeof": Symbol(react.context),
                        "Consumer": Object {
                          "$$typeof": Symbol(react.context),
                          "_calculateChangedBits": null,
                          "_context": [Circular],
                        },
                        "Provider": [Circular],
                        "_calculateChangedBits": null,
                        "_currentRenderer": Object {},
                        "_currentRenderer2": null,
                        "_currentValue": null,
                        "_currentValue2": null,
                        "_threadCount": 0,
                      },
                    },
                    "updateQueue": null,
                  },
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Connect {
                    "_reactInternalFiber": [Circular],
                    "_reactInternalInstance": Object {},
                    "context": Object {},
                    "indirectRenderWrappedComponent": [Function],
                    "props": Object {
                      "login": [MockFunction],
                    },
                    "refs": Object {},
                    "selectChildElement": [Function],
                    "selectDerivedProps": [Function],
                    "state": null,
                    "updater": Object {
                      "enqueueForceUpdate": [Function],
                      "enqueueReplaceState": [Function],
                      "enqueueSetState": [Function],
                      "isMounted": [Function],
                    },
                  },
                  "tag": 1,
                  "treeBaseDuration": 0,
                  "type": [Function],
                  "updateQueue": null,
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": null,
                "tag": 9,
                "treeBaseDuration": 0,
                "type": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": Object {
                    "$$typeof": Symbol(react.context),
                    "Consumer": [Circular],
                    "Provider": Object {
                      "$$typeof": Symbol(react.provider),
                      "_context": [Circular],
                    },
                    "_calculateChangedBits": null,
                    "_currentRenderer": Object {},
                    "_currentRenderer2": null,
                    "_currentValue": null,
                    "_currentValue2": null,
                    "_threadCount": 0,
                  },
                },
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": [Circular],
              "tag": 1,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_reactInternalInstance": Object {},
            "context": Object {},
            "handleInputChange": [Function],
            "onSubmit": [Function],
            "props": Object {
              "authCheck": [Function],
              "login": undefined,
              "loginUser": [Function],
            },
            "refs": Object {},
            "state": Object {
              "email": "",
              "password": "",
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "authCheck": [Function],
            "login": undefined,
            "loginUser": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <div
              class="container login-container"
            >
              <div
                class="row"
              >
                <div
                  class="col-md-6 login-form-1"
                >
                  <h3
                    class="heading-class"
                  >
                    Login
                  </h3>
                  <form>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control input-email"
                        name="email"
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        name="password"
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="btnSubmit btnLogin"
                        type="submit"
                        value="Login"
                      />
                    </div>
                  </form>
                </div>
                <div
                  class="col-md-6 login-form-2"
                >
                  <h3>
                    Signup
                  </h3>
                  <form>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="form-control"
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      class="form-group"
                    >
                      <input
                        class="btnSubmit"
                        type="submit"
                        value="Signup"
                      />
                    </div>
                  </form>
                </div>
              </div>
            </div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <div
                className="row"
              >
                <div
                  className="col-md-6 login-form-1"
                >
                  <h3
                    className="heading-class"
                  >
                    Login
                  </h3>
                  <form>
                    <div
                      className="form-group"
                    >
                      <input
                        className="form-control input-email"
                        name="email"
                        onChange={[Function]}
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      className="form-group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      className="form-group"
                    >
                      <input
                        className="btnSubmit btnLogin"
                        onClick={[Function]}
                        type="submit"
                        value="Login"
                      />
                    </div>
                  </form>
                </div>
                <div
                  className="col-md-6 login-form-2"
                >
                  <h3>
                    Signup
                  </h3>
                  <form>
                    <div
                      className="form-group"
                    >
                      <input
                        className="form-control"
                        placeholder="Your Email *"
                        type="text"
                      />
                    </div>
                    <div
                      className="form-group"
                    >
                      <input
                        className="form-control"
                        placeholder="Your Password *"
                        type="password"
                      />
                    </div>
                    <div
                      className="form-group"
                    >
                      <input
                        className="btnSubmit"
                        type="submit"
                        value="Signup"
                      />
                    </div>
                  </form>
                </div>
              </div>,
              "className": "container login-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="row"
                >
                  <div
                    class="col-md-6 login-form-1"
                  >
                    <h3
                      class="heading-class"
                    >
                      Login
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control input-email"
                          name="email"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit btnLogin"
                          type="submit"
                          value="Login"
                        />
                      </div>
                    </form>
                  </div>
                  <div
                    class="col-md-6 login-form-2"
                  >
                    <h3>
                      Signup
                    </h3>
                    <form>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Email *"
                          type="text"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="form-control"
                          placeholder="Your Password *"
                          type="password"
                        />
                      </div>
                      <div
                        class="form-group"
                      >
                        <input
                          class="btnSubmit"
                          type="submit"
                          value="Signup"
                        />
                      </div>
                    </form>
                  </div>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="col-md-6 login-form-1"
                    >
                      <h3
                        className="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control input-email"
                            name="email"
                            onChange={[Function]}
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit btnLogin"
                            onClick={[Function]}
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    <div
                      className="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          className="form-group"
                        >
                          <input
                            className="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>,
                  ],
                  "className": "row",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="col-md-6 login-form-1"
                    >
                      <h3
                        class="heading-class"
                      >
                        Login
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control input-email"
                            name="email"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit btnLogin"
                            type="submit"
                            value="Login"
                          />
                        </div>
                      </form>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <h3
                          className="heading-class"
                        >
                          Login
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control input-email"
                              name="email"
                              onChange={[Function]}
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit btnLogin"
                              onClick={[Function]}
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-1",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <h3
                          class="heading-class"
                        >
                          Login
                        </h3>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Login",
                          "className": "heading-class",
                        },
                        "ref": null,
                        "rendered": Array [
                          "Login",
                        ],
                        "type": "h3",
                      },
                      Object {
                        "instance": <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control input-email"
                              name="email"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit btnLogin"
                              type="submit"
                              value="Login"
                            />
                          </div>
                        </form>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />
                            </div>,
                          ],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="form-control input-email"
                                name="email"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="form-control input-email"
                                name="email"
                                onChange={[Function]}
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="form-control input-email"
                                  name="email"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control input-email",
                                  "name": "email",
                                  "onChange": [Function],
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                name="password"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="form-control"
                                name="password"
                                onChange={[Function]}
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="form-control"
                                  name="password"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control",
                                  "name": "password",
                                  "onChange": [Function],
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit btnLogin"
                                type="submit"
                                value="Login"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="btnSubmit btnLogin"
                                onClick={[Function]}
                                type="submit"
                                value="Login"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="btnSubmit btnLogin"
                                  type="submit"
                                  value="Login"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "btnSubmit btnLogin",
                                  "onClick": [Function],
                                  "type": "submit",
                                  "value": "Login",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                        ],
                        "type": "form",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="col-md-6 login-form-2"
                    >
                      <h3>
                        Signup
                      </h3>
                      <form>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Email *"
                            type="text"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="form-control"
                            placeholder="Your Password *"
                            type="password"
                          />
                        </div>
                        <div
                          class="form-group"
                        >
                          <input
                            class="btnSubmit"
                            type="submit"
                            value="Signup"
                          />
                        </div>
                      </form>
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <h3>
                          Signup
                        </h3>,
                        <form>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            className="form-group"
                          >
                            <input
                              className="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>,
                      ],
                      "className": "col-md-6 login-form-2",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <h3>
                          Signup
                        </h3>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Signup",
                        },
                        "ref": null,
                        "rendered": Array [
                          "Signup",
                        ],
                        "type": "h3",
                      },
                      Object {
                        "instance": <form>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Email *"
                              type="text"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="form-control"
                              placeholder="Your Password *"
                              type="password"
                            />
                          </div>
                          <div
                            class="form-group"
                          >
                            <input
                              class="btnSubmit"
                              type="submit"
                              value="Signup"
                            />
                          </div>
                        </form>,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            <div
                              className="form-group"
                            >
                              <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>,
                          ],
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Email *"
                                type="text"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="form-control"
                                  placeholder="Your Email *"
                                  type="text"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Email *",
                                  "type": "text",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="form-control"
                                placeholder="Your Password *"
                                type="password"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="form-control"
                                  placeholder="Your Password *"
                                  type="password"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "form-control",
                                  "placeholder": "Your Password *",
                                  "type": "password",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                          Object {
                            "instance": <div
                              class="form-group"
                            >
                              <input
                                class="btnSubmit"
                                type="submit"
                                value="Signup"
                              />
                            </div>,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": <input
                                className="btnSubmit"
                                type="submit"
                                value="Signup"
                              />,
                              "className": "form-group",
                            },
                            "ref": null,
                            "rendered": Array [
                              Object {
                                "instance": <input
                                  class="btnSubmit"
                                  type="submit"
                                  value="Signup"
                                />,
                                "key": undefined,
                                "nodeType": "host",
                                "props": Object {
                                  "className": "btnSubmit",
                                  "type": "submit",
                                  "value": "Signup",
                                },
                                "ref": null,
                                "rendered": Array [
                                  undefined,
                                ],
                                "type": "input",
                              },
                            ],
                            "type": "div",
                          },
                        ],
                        "type": "form",
                      },
                    ],
                    "type": "div",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
